package com.mycompany.lasttime;

import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
public class mainFrame extends javax.swing.JFrame {
     
    DefaultTableModel   model;
    File f;
    /**
     * Creates new form mainFrame
     */
    public mainFrame() throws Exception{
        initComponents();
        setTitle("why are we here");
        model = (DefaultTableModel) table.getModel();
        table.setAutoCreateRowSorter(true);
        f = new File("src/data.bin");
        if(!f.exists()){
            f.createNewFile();
        }
        start();
    }
    public void start() throws Exception {
        FileInputStream fi = new FileInputStream(f);
        if (f.length() <= 0) {
            return;
        }
        ObjectInputStream oi = new ObjectInputStream(fi);
        Vector<Vector> tableData = (Vector<Vector>) oi.readObject();
        oi.close();
        fi.close();
        numberOfClient = tableData.size();
        for (int i = 0; i < numberOfClient; i++) {
            model.addRow(new Object[]{tableData.get(i).get(0) , tableData.get(i).get(1) , tableData.get(i).get(2) , tableData.get(i).get(3) , tableData.get(i).get(4)});
        }
        updateCounter(numberOfClient);
    }
    public void updateFile() throws Exception{
        Vector<Vector> tableData = model.getDataVector();
        FileOutputStream fo = new FileOutputStream(f);
        ObjectOutputStream oo = new ObjectOutputStream(fo);
        oo.writeObject(tableData);
        fo.close();
        oo.close();
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        newClientPanel = new javax.swing.JPanel();
        fullNameLabel = new javax.swing.JLabel();
        fullNameText = new javax.swing.JTextField();
        phoneNumberLabel = new javax.swing.JLabel();
        phoneNumberText = new javax.swing.JTextField();
        gmailLabel = new javax.swing.JLabel();
        gmailText = new javax.swing.JTextField();
        cityLabel = new javax.swing.JLabel();
        cityText = new javax.swing.JTextField();
        addButton = new javax.swing.JButton();
        clearButton = new javax.swing.JButton();
        updateButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        listOfcontactslabel = new javax.swing.JLabel();
        numberOfClientsLabel = new javax.swing.JLabel();
        counterLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        searchBox = new javax.swing.JTextField();
        comboBox = new javax.swing.JComboBox<>();
        searchButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setAlwaysOnTop(true);
        setMinimumSize(new java.awt.Dimension(950, 650));
        setPreferredSize(new java.awt.Dimension(950, 650));
        setResizable(false);

        mainPanel.setBackground(new java.awt.Color(255, 204, 204));
        mainPanel.setMinimumSize(new java.awt.Dimension(1000, 700));
        mainPanel.setPreferredSize(new java.awt.Dimension(1000, 700));

        newClientPanel.setBackground(new java.awt.Color(204, 204, 204));
        newClientPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153), 3), "new client", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Serif", 3, 24))); // NOI18N

        fullNameLabel.setFont(new java.awt.Font("Serif", 3, 24)); // NOI18N
        fullNameLabel.setText("* full name");

        fullNameText.setFont(new java.awt.Font("Serif", 3, 14)); // NOI18N

        phoneNumberLabel.setFont(new java.awt.Font("Serif", 3, 24)); // NOI18N
        phoneNumberLabel.setText("* phone number");

        phoneNumberText.setFont(new java.awt.Font("Serif", 3, 18)); // NOI18N

        gmailLabel.setFont(new java.awt.Font("Serif", 3, 24)); // NOI18N
        gmailLabel.setText("* Gmail");

        gmailText.setFont(new java.awt.Font("Serif", 3, 18)); // NOI18N

        cityLabel.setFont(new java.awt.Font("Serif", 3, 24)); // NOI18N
        cityLabel.setText("City");

        cityText.setFont(new java.awt.Font("Serif", 3, 18)); // NOI18N

        addButton.setFont(new java.awt.Font("Serif", 3, 24)); // NOI18N
        addButton.setText("add");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        clearButton.setFont(new java.awt.Font("Serif", 3, 24)); // NOI18N
        clearButton.setText("clear");
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });

        updateButton.setFont(new java.awt.Font("Serif", 3, 24)); // NOI18N
        updateButton.setText("update");
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });

        deleteButton.setFont(new java.awt.Font("Serif", 3, 24)); // NOI18N
        deleteButton.setText("Delete");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout newClientPanelLayout = new javax.swing.GroupLayout(newClientPanel);
        newClientPanel.setLayout(newClientPanelLayout);
        newClientPanelLayout.setHorizontalGroup(
            newClientPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(phoneNumberText)
            .addGroup(newClientPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(newClientPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(fullNameText)
                    .addComponent(fullNameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(gmailText)
                    .addGroup(newClientPanelLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(cityLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(gmailLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cityText)
                    .addComponent(phoneNumberLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 341, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(newClientPanelLayout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addGroup(newClientPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(addButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(updateButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(newClientPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(clearButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(deleteButton, javax.swing.GroupLayout.DEFAULT_SIZE, 179, Short.MAX_VALUE)))))
        );
        newClientPanelLayout.setVerticalGroup(
            newClientPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(newClientPanelLayout.createSequentialGroup()
                .addContainerGap(32, Short.MAX_VALUE)
                .addComponent(fullNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(fullNameText, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(phoneNumberLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(phoneNumberText, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(gmailLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(gmailText, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(cityLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cityText, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(newClientPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(addButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(clearButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(newClientPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(updateButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(deleteButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        listOfcontactslabel.setBackground(new java.awt.Color(204, 204, 204));
        listOfcontactslabel.setFont(new java.awt.Font("Serif", 3, 24)); // NOI18N
        listOfcontactslabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        listOfcontactslabel.setText("List of contacts");

        numberOfClientsLabel.setFont(new java.awt.Font("Serif", 3, 24)); // NOI18N
        numberOfClientsLabel.setText("Number of clients : ");

        counterLabel.setFont(new java.awt.Font("Serif", 3, 24)); // NOI18N
        counterLabel.setText("0");

        table.setFont(new java.awt.Font("Serif", 3, 12)); // NOI18N
        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "No.", "full name ", "phone number", "gmail", "city"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(table);
        if (table.getColumnModel().getColumnCount() > 0) {
            table.getColumnModel().getColumn(0).setResizable(false);
            table.getColumnModel().getColumn(0).setPreferredWidth(30);
            table.getColumnModel().getColumn(1).setResizable(false);
            table.getColumnModel().getColumn(1).setPreferredWidth(120);
            table.getColumnModel().getColumn(2).setResizable(false);
            table.getColumnModel().getColumn(2).setPreferredWidth(90);
            table.getColumnModel().getColumn(3).setResizable(false);
            table.getColumnModel().getColumn(3).setPreferredWidth(150);
            table.getColumnModel().getColumn(4).setResizable(false);
        }

        comboBox.setFont(new java.awt.Font("Serif", 3, 24)); // NOI18N
        comboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All", "Full name", "Phone number", "Gmail", "City" }));
        comboBox.setSelectedIndex(1);

        searchButton.setFont(new java.awt.Font("Serif", 3, 24)); // NOI18N
        searchButton.setText("Search");
        searchButton.setToolTipText("");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addComponent(numberOfClientsLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(counterLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(listOfcontactslabel, javax.swing.GroupLayout.PREFERRED_SIZE, 522, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(newClientPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addComponent(searchBox, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(comboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(searchButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 542, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(85, 85, 85))
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(numberOfClientsLabel)
                        .addComponent(counterLabel))
                    .addComponent(listOfcontactslabel, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(searchBox)
                            .addComponent(comboBox)
                            .addComponent(searchButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 492, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(newClientPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(98, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
        // TODO add your handling code here:
       clear();
    }//GEN-LAST:event_clearButtonActionPerformed

    
    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        if(checkmaininfo()){
               Client newClient;
               if(cityText.getText().trim().isEmpty()){
                   newClient = new Client(fullNameText.getText().trim(),phoneNumberText.getText().trim(),gmailText.getText().trim());
                }
               else{
                    newClient = new Client(fullNameText.getText().trim(),phoneNumberText.getText().trim(),gmailText.getText().trim(),cityText.getText().trim());
               }
              if(!newClient.flag()){
                  JOptionPane.showMessageDialog(this,newClient.getMessege(),"Error Message",JOptionPane.ERROR_MESSAGE);
              }
              else{
                  addToTable(newClient);
              }
    }else{
           JOptionPane.showMessageDialog(this, "Plase Enter The Main Informtion!","Error Message",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_addButtonActionPerformed
public boolean checkmaininfo(){
        return !fullNameText.getText().isEmpty() &&
               !phoneNumberText.getText().isEmpty()&&
               !gmailText.getText().isEmpty();
    }
    
    public void addToTable(Client c){
        //instead of int [] arr =new int []{9,7,8};
        //           object[] obj = new object []{};
       model.addRow(new Object[]{table.getRowCount()+1 ,c.getFullName(),c.getPhoneNumber(),c.getGmail(),c.getCity().isEmpty()?"null":c.getCity()});
       numberOfClient++;
       //counterLabel.setText(numberOfClient+"");
       updateCounter(numberOfClient);
       clear();}
    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
       int index =table.getSelectedRow();
       if(index<0){
      JOptionPane.showMessageDialog(this, "Plase Select at least one row!","not select row",JOptionPane.ERROR_MESSAGE);
       }
       else{
        model.removeRow(index);
        numberOfClient--;
        updateCounter(numberOfClient);
        
    }//GEN-LAST:event_deleteButtonActionPerformed
    }
    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
       if (searchBox.getText().trim().isEmpty()){
 JOptionPane.showMessageDialog(this, "can't found information","error massege",JOptionPane.ERROR_MESSAGE);  
    }//GEN-LAST:event_searchButtonActionPerformed
else{
         if(comboBox.getSelectedItem().equals("ALL"))
         {
             for(int i=0 ;i<numberOfClient;i++){
                 for(int j=1 ; j<5 ;j++){
                   if(model.getValueAt(i,j).equals(searchBox.getText().trim())) { 
                     validsearch(i);
                     return;
                   }
                 
             }
              
         }
         }

         else if(comboBox.getSelectedItem().equals("Full name")){
             for(int i=0 ; i<numberOfClient ;i++){
                   if(model.getValueAt(i,1).equals(searchBox.getText().trim())) { 
                     validsearch(i);
                     return;
                   }
                 
             }
              
        }
         else if(comboBox.getSelectedItem().equals("Phone number")){
             for(int i=0 ; i<numberOfClient ;i++){
                   if(model.getValueAt(i,2).equals(searchBox.getText().trim())) { 
                     validsearch(i);
                     return;
                   }
                 
             }
        }
        else if(comboBox.getSelectedItem().equals("Gmail")){
            for(int i=0 ; i<numberOfClient ;i++){
                   if(model.getValueAt(i,3).equals(searchBox.getText().trim())) { 
                     validsearch(i);
                     return;
                   }
                 
             }
        }
        else{
            for(int i=0 ; i<numberOfClient ;i++){
                   if(model.getValueAt(i,4).equals(searchBox.getText().trim())) { 
                     validsearch(i);
                     return;
                   }
                 
             }
    }

       }
    }
    public void upDateToTable(Client c){
        int i=table.getSelectedRow();
        model.setValueAt(c.getFullName(), i,1);
        model.setValueAt(c.getPhoneNumber(), i,2);
        model.setValueAt(c.getGmail(), i,3);
        model.setValueAt(c.getCity(), i,4);
    }

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
        if(checkmaininfo()){
               Client newClient;
               if(cityText.getText().trim().isEmpty()){
                   newClient = new Client(fullNameText.getText().trim(),phoneNumberText.getText().trim(),gmailText.getText().trim());
                }
               else{
                    newClient = new Client(fullNameText.getText().trim(),phoneNumberText.getText().trim(),gmailText.getText().trim(),cityText.getText().trim());
               }
              if(!newClient.flag()){
                  JOptionPane.showMessageDialog(this,newClient.getMessege(),"Error Message",JOptionPane.ERROR_MESSAGE);
              }
              else{
                  upDateToTable(newClient);
              }
    }else{
           JOptionPane.showMessageDialog(this, "Plase Enter The Main Informtion!","Error Message",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_updateButtonActionPerformed
       
public void validsearch(int i){

  JOptionPane.showMessageDialog(this, " founded ","result of your search",JOptionPane.INFORMATION_MESSAGE);
                       table.setRowSelectionInterval(i, i);
                       fullNameText.setText(model.getValueAt(i, 1) +"");
                       phoneNumberText.setText(model.getValueAt(i, 2)+"");
                       gmailText.setText(model.getValueAt(i, 3)+"");
                       cityText.setText(model.getValueAt(i, 4)+"");
    
}
    
    

    
    
    
    
    
    public void clear(){
    fullNameText.setText("");
    phoneNumberText.setText("");
    gmailText.setText("");
    cityText.setText("");
}

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws Exception {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(mainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(mainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(mainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(mainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new mainFrame().setVisible(true);
                } catch (Exception ex) {
                    Logger.getLogger(mainFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }
    public void updateCounter(int numberOfClient)
      {
         counterLabel.setText(numberOfClient + "");
      }
    
    
    
  public static int numberOfClient;
 
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JLabel cityLabel;
    private javax.swing.JTextField cityText;
    private javax.swing.JButton clearButton;
    private javax.swing.JComboBox<String> comboBox;
    private javax.swing.JLabel counterLabel;
    private javax.swing.JButton deleteButton;
    private javax.swing.JLabel fullNameLabel;
    private javax.swing.JTextField fullNameText;
    private javax.swing.JLabel gmailLabel;
    private javax.swing.JTextField gmailText;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel listOfcontactslabel;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JPanel newClientPanel;
    private javax.swing.JLabel numberOfClientsLabel;
    private javax.swing.JLabel phoneNumberLabel;
    private javax.swing.JTextField phoneNumberText;
    private javax.swing.JTextField searchBox;
    private javax.swing.JButton searchButton;
    private javax.swing.JTable table;
    private javax.swing.JButton updateButton;
    // End of variables declaration//GEN-END:variables
}
